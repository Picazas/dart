//Pensado para una distancia de unos dos metros

import SimpleOpenNI.*;
import processing.opengl.*;
import pbox2d.*;
import org.jbox2d.collision.shapes.*;
import org.jbox2d.common.*;
import org.jbox2d.dynamics.*;
SimpleOpenNI kinect;
PBox2D box2d;

ArrayList<Box> boxes;
ArrayList<Robot> robots;
int cuenta=0;
int cuenta2=0;
PVector jointPos = new PVector();

void setup(){
  size (640,480,OPENGL);
  kinect= new SimpleOpenNI(this);
  
  box2d = new PBox2D(this);
  box2d.createWorld();
  box2d.setGravity(0, 200);
  
  boxes = new ArrayList<Box>();
  robots = new ArrayList<Robot>();
  Vec2 gravity = new Vec2(0,-10);
  
  if (kinect.isInit()==false){
   println("Nada de nada chato");
   exit();
   return; 
  }
  
  kinect.enableDepth();
  kinect.enableUser();
  background(0);
}

void draw(){
  kinect.update();
  box2d.step();
  background(0);
  //image(kinect.userImage(),0,0);
  
  if (kinect.getNumberOfUsers() > 0) { 

    // find out which pixels have users in them
    int[] userMap = kinect.userMap(); 

    // populate the pixels array
    // from the sketch's current contents
    loadPixels(); 
    for (int i = 0; i < userMap.length; i++) { 
      // if the current pixel is on a user
      if (userMap[i] != 0) {
        // make it green
        pixels[i] = color(0, 255, 0); 
      }
    }
    
    // display the changed pixel array
    updatePixels(); 
  }
  
  int[] userList = kinect.getUsers();
 for(int i=0;i<userList.length;i++)
 {
   int userId = userList [i];
  kinect.getJointPositionSkeleton(userId,SimpleOpenNI.SKEL_LEFT_HAND,jointPos);

  if (cuenta2==60){
  println("left hand:"+jointPos);
  cuenta2=0;
  } else cuenta2++;
  
    
  translate(320,240,0);
  rotateX(radians(180));
  jointPos.x = jointPos.x / 4;
  jointPos.y = jointPos.y / 4;
  
  if (cuenta==2){
    cuenta = 0;
    Robot p = new Robot(jointPos.x,jointPos.y);
    robots.add(p);
  }
  else { cuenta++;}
  
  for (Robot b: robots){
    b.display();
  }
  
  
  fill(255,0,0);
  ellipse(jointPos.x,jointPos.y,20,20);
 }
}

void onNewUser(SimpleOpenNI curContext, int userId)
{
  println("onNewUser - userId: " + userId);
  println("\tstart tracking skeleton");
  
  curContext.startTrackingSkeleton(userId);
}

void onLostUser(SimpleOpenNI curContext, int userId)
{
  println("onLostUser - userId: " + userId);
}

void onVisibleUser(SimpleOpenNI curContext, int userId)
{
  //println("onVisibleUser - userId: " + userId);
}


void keyPressed()
{
  switch(key)
  {
  case ' ':
    kinect.setMirror(!kinect.mirror());
    break;
  }
}


///////////////////////////////////////////////////////////////////////////////

class Robot{
  
  Body body;
  
  Robot(float x, float y){
  
  BodyDef bd = new BodyDef();
  bd.type = BodyType.DYNAMIC;
  bd.position.set(box2d.coordPixelsToWorld(x,y));
  body = box2d.createBody(bd);
  
  PolygonShape cr = new PolygonShape();
  float box2dW0 = box2d.scalarPixelsToWorld(8);
  float box2dH0 = box2d.scalarPixelsToWorld(8);
  cr.setAsBox(box2dW0, box2dH0);
  
  CircleShape cs = new CircleShape();
  cs.m_radius = box2d.scalarPixelsToWorld(3);
  
  PolygonShape pi = new PolygonShape();
  float box2dW1 = box2d.scalarPixelsToWorld(3);
  float box2dH1 = box2d.scalarPixelsToWorld(6);
  pi.setAsBox(box2dW1, box2dH1);
  
  PolygonShape pd = new PolygonShape();
  float box2dW2 = box2d.scalarPixelsToWorld(3);
  float box2dH2 = box2d.scalarPixelsToWorld(6);
  pd.setAsBox(box2dW2, box2dH2);
  
  PolygonShape ai = new PolygonShape();
  float box2dW3 = box2d.scalarPixelsToWorld(2);
  float box2dH3 = box2d.scalarPixelsToWorld(4);
  ai.setAsBox(box2dW3, box2dH3);
  
  PolygonShape ad = new PolygonShape();
  float box2dW4 = box2d.scalarPixelsToWorld(2);
  float box2dH4 = box2d.scalarPixelsToWorld(4);
  ad.setAsBox(box2dW4, box2dH4);
  
  body.createFixture(cr,1.0);
  body.createFixture(cs, 1.0);
  body.createFixture(pi,1.0);
  body.createFixture(pd, 1.0);
  body.createFixture(ai,1.0);
  body.createFixture(ad, 1.0);
  
  Vec2 offsetcs = new Vec2(0,-7);
  offsetcs = box2d.vectorPixelsToWorld(offsetcs);
  cs.m_p.set(offsetcs.x,offsetcs.y);

  body.setLinearVelocity(new Vec2(random(-5, 5), random(2, 5)));
  body.setAngularVelocity(random(-5, 5));
  
}

void display() {
    Vec2 pos = box2d.getBodyPixelCoord(body);
    float a = body.getAngle();
 
    rectMode(CENTER);
    pushMatrix();
    translate(pos.x,pos.y);
    rotate(-a);
    fill(175);
    stroke(0);
    rect(0,0,8,8);
    ellipse(0,-8,3*2,3*2);
    rect(3,7,3,6);
    rect(-3,7,3,6);
    rotate(-45);
    rect(7,-10,2,4);
    rotate(90);
    rect(-7,-10,2,4);
    popMatrix();
  }
  
}
